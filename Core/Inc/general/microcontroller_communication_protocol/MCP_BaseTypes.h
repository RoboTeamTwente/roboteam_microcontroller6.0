// AUTOGENERATED. Run generator/main.py to regenerate
#ifndef __MCP_BASETYPES_H
#define __MCP_BASETYPES_H

#include <stdint.h>
#include <stdbool.h>


#define MCP_LOCAL_VERSION 1
#define MCP_LARGEST_PACKET_IN_BYTES 2

#define MCP_TOP_BOARD                                                               0
#define MCP_DRIBBLER_BOARD                                                          4
#define MCP_KICKER_BOARD                                                            7
#define MCP_POWER_BOARD                                                             15

#define MCP_PACKET_TYPE_MCP_ARE_YOU_ALIVE                                           0
#define MCP_PACKET_ID_TO_POWER_MCP_ARE_YOU_ALIVE                                    0b11110000000
#define MCP_PACKET_ID_TO_KICKER_MCP_ARE_YOU_ALIVE                                   0b01110000000
#define MCP_PACKET_ID_TO_DRIBBLER_MCP_ARE_YOU_ALIVE                                 0b01000000000
#define MCP_PACKET_SIZE_MCP_ARE_YOU_ALIVE                                           1
#define MCP_PACKET_RANGE_MCP_ARE_YOU_ALIVE_MCP_VERSION_MIN                          0
#define MCP_PACKET_RANGE_MCP_ARE_YOU_ALIVE_MCP_VERSION_MAX                          15

#define MCP_PACKET_TYPE_MCP_SET_DRIBBLER_SPEED                                      1
#define MCP_PACKET_ID_TO_DRIBBLER_MCP_SET_DRIBBLER_SPEED                            0b01000000001
#define MCP_PACKET_SIZE_MCP_SET_DRIBBLER_SPEED                                      1
#define MCP_PACKET_RANGE_MCP_SET_DRIBBLER_SPEED_SPEED_MIN                           0.0000000000000000F
#define MCP_PACKET_RANGE_MCP_SET_DRIBBLER_SPEED_SPEED_MAX                           1.0000000000000000F

#define MCP_PACKET_TYPE_MCP_KICKER_CHARGE                                           2
#define MCP_PACKET_ID_TO_KICKER_MCP_KICKER_CHARGE                                   0b01110000001
#define MCP_PACKET_SIZE_MCP_KICKER_CHARGE                                           2
#define MCP_PACKET_RANGE_MCP_KICKER_CHARGE_VOLTAGE_MIN                              0
#define MCP_PACKET_RANGE_MCP_KICKER_CHARGE_VOLTAGE_MAX                              1023

#define MCP_PACKET_TYPE_MCP_KICKER_STOP_CHARGE                                      3
#define MCP_PACKET_ID_TO_KICKER_MCP_KICKER_STOP_CHARGE                              0b01110000010
#define MCP_PACKET_SIZE_MCP_KICKER_STOP_CHARGE                                      1

#define MCP_PACKET_TYPE_MCP_KICK                                                    4
#define MCP_PACKET_ID_TO_KICKER_MCP_KICK                                            0b01110000011
#define MCP_PACKET_SIZE_MCP_KICK                                                    1
#define MCP_PACKET_RANGE_MCP_KICK_SHOOT_POWER_MIN                                   0.0000000000000000F
#define MCP_PACKET_RANGE_MCP_KICK_SHOOT_POWER_MAX                                   6.5000000000000000F

#define MCP_PACKET_TYPE_MCP_CHIP                                                    5
#define MCP_PACKET_ID_TO_KICKER_MCP_CHIP                                            0b01110000100
#define MCP_PACKET_SIZE_MCP_CHIP                                                    1
#define MCP_PACKET_RANGE_MCP_CHIP_SHOOT_POWER_MIN                                   0.0000000000000000F
#define MCP_PACKET_RANGE_MCP_CHIP_SHOOT_POWER_MAX                                   6.5000000000000000F

#define MCP_PACKET_TYPE_MCP_DRIBBLER_ALIVE                                          6
#define MCP_PACKET_ID_TO_TOP_MCP_DRIBBLER_ALIVE                                     0b00000000000
#define MCP_PACKET_SIZE_MCP_DRIBBLER_ALIVE                                          1
#define MCP_PACKET_RANGE_MCP_DRIBBLER_ALIVE_MCP_VERSION_MIN                         0
#define MCP_PACKET_RANGE_MCP_DRIBBLER_ALIVE_MCP_VERSION_MAX                         15
#define MCP_PACKET_RANGE_MCP_DRIBBLER_ALIVE_DRIBBLER_ENCODER_WORKING_MIN            0
#define MCP_PACKET_RANGE_MCP_DRIBBLER_ALIVE_DRIBBLER_ENCODER_WORKING_MAX            1
#define MCP_PACKET_RANGE_MCP_DRIBBLER_ALIVE_BALLSENSOR_WORKING_MIN                  0
#define MCP_PACKET_RANGE_MCP_DRIBBLER_ALIVE_BALLSENSOR_WORKING_MAX                  1

#define MCP_PACKET_TYPE_MCP_SEES_BALL                                               7
#define MCP_PACKET_ID_TO_TOP_MCP_SEES_BALL                                          0b00000000001
#define MCP_PACKET_SIZE_MCP_SEES_BALL                                               1
#define MCP_PACKET_RANGE_MCP_SEES_BALL_DRIBBLER_SEES_BALL_MIN                       0
#define MCP_PACKET_RANGE_MCP_SEES_BALL_DRIBBLER_SEES_BALL_MAX                       1
#define MCP_PACKET_RANGE_MCP_SEES_BALL_BALLSENSOR_SEES_BALL_MIN                     0
#define MCP_PACKET_RANGE_MCP_SEES_BALL_BALLSENSOR_SEES_BALL_MAX                     1

#define MCP_PACKET_TYPE_MCP_KICKER_ALIVE                                            8
#define MCP_PACKET_ID_TO_TOP_MCP_KICKER_ALIVE                                       0b00000000010
#define MCP_PACKET_SIZE_MCP_KICKER_ALIVE                                            1
#define MCP_PACKET_RANGE_MCP_KICKER_ALIVE_MCP_VERSION_MIN                           0
#define MCP_PACKET_RANGE_MCP_KICKER_ALIVE_MCP_VERSION_MAX                           15
#define MCP_PACKET_RANGE_MCP_KICKER_ALIVE_SENSOR_WORKING_MIN                        0
#define MCP_PACKET_RANGE_MCP_KICKER_ALIVE_SENSOR_WORKING_MAX                        1

#define MCP_PACKET_TYPE_MCP_KICKER_CAPACITOR_VOLTAGE                                9
#define MCP_PACKET_ID_TO_TOP_MCP_KICKER_CAPACITOR_VOLTAGE                           0b00000000011
#define MCP_PACKET_SIZE_MCP_KICKER_CAPACITOR_VOLTAGE                                2
#define MCP_PACKET_RANGE_MCP_KICKER_CAPACITOR_VOLTAGE_VOLTAGE_MIN                   0
#define MCP_PACKET_RANGE_MCP_KICKER_CAPACITOR_VOLTAGE_VOLTAGE_MAX                   1023

#define MCP_PACKET_TYPE_MCP_POWER_ALIVE                                             10
#define MCP_PACKET_ID_TO_TOP_MCP_POWER_ALIVE                                        0b00000000100
#define MCP_PACKET_SIZE_MCP_POWER_ALIVE                                             1
#define MCP_PACKET_RANGE_MCP_POWER_ALIVE_MCP_VERSION_MIN                            0
#define MCP_PACKET_RANGE_MCP_POWER_ALIVE_MCP_VERSION_MAX                            15
#define MCP_PACKET_RANGE_MCP_POWER_ALIVE_SENSOR_WORKING_MIN                         0
#define MCP_PACKET_RANGE_MCP_POWER_ALIVE_SENSOR_WORKING_MAX                         1

#define MCP_PACKET_TYPE_MCP_POWER_VOLTAGE                                           11
#define MCP_PACKET_ID_TO_TOP_MCP_POWER_VOLTAGE                                      0b00000000101
#define MCP_PACKET_ID_TO_DRIBBLER_MCP_POWER_VOLTAGE                                 0b01000000010
#define MCP_PACKET_SIZE_MCP_POWER_VOLTAGE                                           1
#define MCP_PACKET_RANGE_MCP_POWER_VOLTAGE_VOLTAGE_POWER_BOARD_MIN                  20.0000000000000000F
#define MCP_PACKET_RANGE_MCP_POWER_VOLTAGE_VOLTAGE_POWER_BOARD_MAX                  30.0000000000000000F

#define MCP_PACKET_TYPE_MCP_KILL                                                    12
#define MCP_PACKET_ID_TO_POWER_MCP_KILL                                             0b11110000001
#define MCP_PACKET_SIZE_MCP_KILL                                                    1


static uint8_t MCP_TYPE_TO_SIZE(uint16_t type) {
    if (type == MCP_PACKET_TYPE_MCP_ARE_YOU_ALIVE)                             return MCP_PACKET_SIZE_MCP_ARE_YOU_ALIVE;
    if (type == MCP_PACKET_TYPE_MCP_SET_DRIBBLER_SPEED)                        return MCP_PACKET_SIZE_MCP_SET_DRIBBLER_SPEED;
    if (type == MCP_PACKET_TYPE_MCP_KICKER_CHARGE)                             return MCP_PACKET_SIZE_MCP_KICKER_CHARGE;
    if (type == MCP_PACKET_TYPE_MCP_KICKER_STOP_CHARGE)                        return MCP_PACKET_SIZE_MCP_KICKER_STOP_CHARGE;
    if (type == MCP_PACKET_TYPE_MCP_KICK)                                      return MCP_PACKET_SIZE_MCP_KICK;
    if (type == MCP_PACKET_TYPE_MCP_CHIP)                                      return MCP_PACKET_SIZE_MCP_CHIP;
    if (type == MCP_PACKET_TYPE_MCP_DRIBBLER_ALIVE)                            return MCP_PACKET_SIZE_MCP_DRIBBLER_ALIVE;
    if (type == MCP_PACKET_TYPE_MCP_SEES_BALL)                                 return MCP_PACKET_SIZE_MCP_SEES_BALL;
    if (type == MCP_PACKET_TYPE_MCP_KICKER_ALIVE)                              return MCP_PACKET_SIZE_MCP_KICKER_ALIVE;
    if (type == MCP_PACKET_TYPE_MCP_KICKER_CAPACITOR_VOLTAGE)                  return MCP_PACKET_SIZE_MCP_KICKER_CAPACITOR_VOLTAGE;
    if (type == MCP_PACKET_TYPE_MCP_POWER_ALIVE)                               return MCP_PACKET_SIZE_MCP_POWER_ALIVE;
    if (type == MCP_PACKET_TYPE_MCP_POWER_VOLTAGE)                             return MCP_PACKET_SIZE_MCP_POWER_VOLTAGE;
    if (type == MCP_PACKET_TYPE_MCP_KILL)                                      return MCP_PACKET_SIZE_MCP_KILL;
    return 1;
}

static uint16_t MCP_TYPE_TO_ID(uint16_t type, uint8_t receiving_board) {
    if (receiving_board == MCP_TOP_BOARD) {
        if (type == MCP_PACKET_TYPE_MCP_DRIBBLER_ALIVE)                            return MCP_PACKET_ID_TO_TOP_MCP_DRIBBLER_ALIVE                             ;
        if (type == MCP_PACKET_TYPE_MCP_SEES_BALL)                                 return MCP_PACKET_ID_TO_TOP_MCP_SEES_BALL                                  ;
        if (type == MCP_PACKET_TYPE_MCP_KICKER_ALIVE)                              return MCP_PACKET_ID_TO_TOP_MCP_KICKER_ALIVE                               ;
        if (type == MCP_PACKET_TYPE_MCP_KICKER_CAPACITOR_VOLTAGE)                  return MCP_PACKET_ID_TO_TOP_MCP_KICKER_CAPACITOR_VOLTAGE                   ;
        if (type == MCP_PACKET_TYPE_MCP_POWER_ALIVE)                               return MCP_PACKET_ID_TO_TOP_MCP_POWER_ALIVE                                ;
        if (type == MCP_PACKET_TYPE_MCP_POWER_VOLTAGE)                             return MCP_PACKET_ID_TO_TOP_MCP_POWER_VOLTAGE                              ;
    } else if (receiving_board == MCP_DRIBBLER_BOARD) {
        if (type == MCP_PACKET_TYPE_MCP_ARE_YOU_ALIVE)                             return MCP_PACKET_ID_TO_DRIBBLER_MCP_ARE_YOU_ALIVE                         ;
        if (type == MCP_PACKET_TYPE_MCP_SET_DRIBBLER_SPEED)                        return MCP_PACKET_ID_TO_DRIBBLER_MCP_SET_DRIBBLER_SPEED                    ;
        if (type == MCP_PACKET_TYPE_MCP_POWER_VOLTAGE)                             return MCP_PACKET_ID_TO_DRIBBLER_MCP_POWER_VOLTAGE                         ;
    } else if (receiving_board == MCP_KICKER_BOARD) {
        if (type == MCP_PACKET_TYPE_MCP_ARE_YOU_ALIVE)                             return MCP_PACKET_ID_TO_KICKER_MCP_ARE_YOU_ALIVE                           ;
        if (type == MCP_PACKET_TYPE_MCP_KICKER_CHARGE)                             return MCP_PACKET_ID_TO_KICKER_MCP_KICKER_CHARGE                           ;
        if (type == MCP_PACKET_TYPE_MCP_KICKER_STOP_CHARGE)                        return MCP_PACKET_ID_TO_KICKER_MCP_KICKER_STOP_CHARGE                      ;
        if (type == MCP_PACKET_TYPE_MCP_KICK)                                      return MCP_PACKET_ID_TO_KICKER_MCP_KICK                                    ;
        if (type == MCP_PACKET_TYPE_MCP_CHIP)                                      return MCP_PACKET_ID_TO_KICKER_MCP_CHIP                                    ;
    } else if (receiving_board == MCP_POWER_BOARD) {
        if (type == MCP_PACKET_TYPE_MCP_ARE_YOU_ALIVE)                             return MCP_PACKET_ID_TO_POWER_MCP_ARE_YOU_ALIVE                            ;
        if (type == MCP_PACKET_TYPE_MCP_KILL)                                      return MCP_PACKET_ID_TO_POWER_MCP_KILL                                     ;
    }
    return 0xFFFF;

}

#endif /*__MCP_BASETYPES_H*/
