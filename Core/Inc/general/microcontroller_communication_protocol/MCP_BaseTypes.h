// AUTOGENERATED. Run generator/main.py to regenerate
#ifndef __MCP_BASETYPES_H
#define __MCP_BASETYPES_H

#include <stdint.h>
#include <stdbool.h>


#define MCP_LOCAL_VERSION 3
#define MCP_LARGEST_PACKET_IN_BYTES 5
#define MCP_MAX_ID_PLUS_ONE 16

#define MCP_TOP_BOARD                                                               0
#define MCP_DRIBBLER_BOARD                                                          4
#define MCP_KICKER_BOARD                                                            7
#define MCP_POWER_BOARD                                                             15

#define MCP_ERROR_BIT_MASK                                                          0x10000000
#define MCP_ERROR_BIT_SHIFT                                                         28
#define MCP_VERSION_BIT_MASK                                                        0x0F000000
#define MCP_VERSION_BIT_SHIFT                                                       24
#define MCP_FROM_ID_BIT_MASK                                                        0x000000F0
#define MCP_FROM_ID_BIT_SHIFT                                                       4
#define MCP_TO_ID_BIT_MASK                                                          0x0000000F
#define MCP_TO_ID_BIT_SHIFT                                                         0

#define MCP_PACKET_TYPE_MCP_ACK                                                     0
#define MCP_PACKET_ID_POWER_TO_KICKER_MCP_ACK                                       0x030000f7
#define MCP_PACKET_ID_POWER_TO_DRIBBLER_MCP_ACK                                     0x030000f4
#define MCP_PACKET_ID_POWER_TO_TOP_MCP_ACK                                          0x030000f0
#define MCP_PACKET_ID_KICKER_TO_POWER_MCP_ACK                                       0x0300007f
#define MCP_PACKET_ID_KICKER_TO_DRIBBLER_MCP_ACK                                    0x03000174
#define MCP_PACKET_ID_KICKER_TO_TOP_MCP_ACK                                         0x03000170
#define MCP_PACKET_ID_DRIBBLER_TO_POWER_MCP_ACK                                     0x0300014f
#define MCP_PACKET_ID_DRIBBLER_TO_KICKER_MCP_ACK                                    0x03000147
#define MCP_PACKET_ID_DRIBBLER_TO_TOP_MCP_ACK                                       0x03000240
#define MCP_PACKET_ID_TOP_TO_POWER_MCP_ACK                                          0x0300020f
#define MCP_PACKET_ID_TOP_TO_KICKER_MCP_ACK                                         0x03000207
#define MCP_PACKET_ID_TOP_TO_DRIBBLER_MCP_ACK                                       0x03000204
#define MCP_PACKET_SIZE_MCP_ACK                                                     1
#define MCP_PACKET_RANGE_MCP_ACK_ACK_NUMBER_MIN                                     0
#define MCP_PACKET_RANGE_MCP_ACK_ACK_NUMBER_MAX                                     255

#define MCP_PACKET_TYPE_MCP_REBOOT                                                  1
#define MCP_PACKET_ID_TOP_TO_POWER_MCP_REBOOT                                       0x0300030f
#define MCP_PACKET_ID_TOP_TO_KICKER_MCP_REBOOT                                      0x03000307
#define MCP_PACKET_ID_TOP_TO_DRIBBLER_MCP_REBOOT                                    0x03000304
#define MCP_PACKET_SIZE_MCP_REBOOT                                                  1
#define MCP_PACKET_RANGE_MCP_REBOOT_ACK_NUMBER_MIN                                  0
#define MCP_PACKET_RANGE_MCP_REBOOT_ACK_NUMBER_MAX                                  255

#define MCP_PACKET_TYPE_MCP_ARE_YOU_ALIVE                                           2
#define MCP_PACKET_ID_TOP_TO_POWER_MCP_ARE_YOU_ALIVE                                0x0300040f
#define MCP_PACKET_ID_TOP_TO_KICKER_MCP_ARE_YOU_ALIVE                               0x03000407
#define MCP_PACKET_ID_TOP_TO_DRIBBLER_MCP_ARE_YOU_ALIVE                             0x03000404
#define MCP_PACKET_SIZE_MCP_ARE_YOU_ALIVE                                           1
#define MCP_PACKET_RANGE_MCP_ARE_YOU_ALIVE_ACK_NUMBER_MIN                           0
#define MCP_PACKET_RANGE_MCP_ARE_YOU_ALIVE_ACK_NUMBER_MAX                           255

#define MCP_PACKET_TYPE_MCP_DRIBBLER_COMMAND                                        3
#define MCP_PACKET_ID_TOP_TO_DRIBBLER_MCP_DRIBBLER_COMMAND                          0x03000504
#define MCP_PACKET_SIZE_MCP_DRIBBLER_COMMAND                                        2
#define MCP_PACKET_RANGE_MCP_DRIBBLER_COMMAND_ACK_NUMBER_MIN                        0
#define MCP_PACKET_RANGE_MCP_DRIBBLER_COMMAND_ACK_NUMBER_MAX                        255
#define MCP_PACKET_RANGE_MCP_DRIBBLER_COMMAND_DRIBBLER_ON_MIN                       0
#define MCP_PACKET_RANGE_MCP_DRIBBLER_COMMAND_DRIBBLER_ON_MAX                       1
#define MCP_PACKET_RANGE_MCP_DRIBBLER_COMMAND_DRIBBLER_OPTION1_MIN                  0
#define MCP_PACKET_RANGE_MCP_DRIBBLER_COMMAND_DRIBBLER_OPTION1_MAX                  1
#define MCP_PACKET_RANGE_MCP_DRIBBLER_COMMAND_DRIBBLER_OPTION2_MIN                  0
#define MCP_PACKET_RANGE_MCP_DRIBBLER_COMMAND_DRIBBLER_OPTION2_MAX                  1
#define MCP_PACKET_RANGE_MCP_DRIBBLER_COMMAND_DRIBBLER_OPTION3_MIN                  0
#define MCP_PACKET_RANGE_MCP_DRIBBLER_COMMAND_DRIBBLER_OPTION3_MAX                  1
#define MCP_PACKET_RANGE_MCP_DRIBBLER_COMMAND_DRIBBLER_OPTION4_MIN                  0
#define MCP_PACKET_RANGE_MCP_DRIBBLER_COMMAND_DRIBBLER_OPTION4_MAX                  1
#define MCP_PACKET_RANGE_MCP_DRIBBLER_COMMAND_DRIBBLER_OPTION5_MIN                  0
#define MCP_PACKET_RANGE_MCP_DRIBBLER_COMMAND_DRIBBLER_OPTION5_MAX                  1
#define MCP_PACKET_RANGE_MCP_DRIBBLER_COMMAND_DRIBBLER_OPTION6_MIN                  0
#define MCP_PACKET_RANGE_MCP_DRIBBLER_COMMAND_DRIBBLER_OPTION6_MAX                  1
#define MCP_PACKET_RANGE_MCP_DRIBBLER_COMMAND_SYSTEM_TEST_MIN                       0
#define MCP_PACKET_RANGE_MCP_DRIBBLER_COMMAND_SYSTEM_TEST_MAX                       1

#define MCP_PACKET_TYPE_MCP_KICKER_CHARGE                                           4
#define MCP_PACKET_ID_TOP_TO_KICKER_MCP_KICKER_CHARGE                               0x03000507
#define MCP_PACKET_SIZE_MCP_KICKER_CHARGE                                           3
#define MCP_PACKET_RANGE_MCP_KICKER_CHARGE_ACK_NUMBER_MIN                           0
#define MCP_PACKET_RANGE_MCP_KICKER_CHARGE_ACK_NUMBER_MAX                           255
#define MCP_PACKET_RANGE_MCP_KICKER_CHARGE_VOLTAGE_MIN                              0
#define MCP_PACKET_RANGE_MCP_KICKER_CHARGE_VOLTAGE_MAX                              1023

#define MCP_PACKET_TYPE_MCP_KICKER_STOP_CHARGE                                      5
#define MCP_PACKET_ID_TOP_TO_KICKER_MCP_KICKER_STOP_CHARGE                          0x03000607
#define MCP_PACKET_SIZE_MCP_KICKER_STOP_CHARGE                                      1
#define MCP_PACKET_RANGE_MCP_KICKER_STOP_CHARGE_ACK_NUMBER_MIN                      0
#define MCP_PACKET_RANGE_MCP_KICKER_STOP_CHARGE_ACK_NUMBER_MAX                      255

#define MCP_PACKET_TYPE_MCP_KICK                                                    6
#define MCP_PACKET_ID_TOP_TO_KICKER_MCP_KICK                                        0x03000707
#define MCP_PACKET_SIZE_MCP_KICK                                                    2
#define MCP_PACKET_RANGE_MCP_KICK_ACK_NUMBER_MIN                                    0
#define MCP_PACKET_RANGE_MCP_KICK_ACK_NUMBER_MAX                                    255
#define MCP_PACKET_RANGE_MCP_KICK_SHOOT_POWER_MIN                                   0.0000000000000000F
#define MCP_PACKET_RANGE_MCP_KICK_SHOOT_POWER_MAX                                   8.0000000000000000F

#define MCP_PACKET_TYPE_MCP_CHIP                                                    7
#define MCP_PACKET_ID_TOP_TO_KICKER_MCP_CHIP                                        0x03000807
#define MCP_PACKET_SIZE_MCP_CHIP                                                    2
#define MCP_PACKET_RANGE_MCP_CHIP_ACK_NUMBER_MIN                                    0
#define MCP_PACKET_RANGE_MCP_CHIP_ACK_NUMBER_MAX                                    255
#define MCP_PACKET_RANGE_MCP_CHIP_SHOOT_POWER_MIN                                   0.0000000000000000F
#define MCP_PACKET_RANGE_MCP_CHIP_SHOOT_POWER_MAX                                   8.0000000000000000F

#define MCP_PACKET_TYPE_MCP_DRIBBLER_ALIVE                                          8
#define MCP_PACKET_ID_DRIBBLER_TO_TOP_MCP_DRIBBLER_ALIVE                            0x03000340
#define MCP_PACKET_ID_DRIBBLER_TO_KICKER_MCP_DRIBBLER_ALIVE                         0x03000947
#define MCP_PACKET_ID_DRIBBLER_TO_POWER_MCP_DRIBBLER_ALIVE                          0x0300054f
#define MCP_PACKET_SIZE_MCP_DRIBBLER_ALIVE                                          2
#define MCP_PACKET_RANGE_MCP_DRIBBLER_ALIVE_ACK_NUMBER_MIN                          0
#define MCP_PACKET_RANGE_MCP_DRIBBLER_ALIVE_ACK_NUMBER_MAX                          255
#define MCP_PACKET_RANGE_MCP_DRIBBLER_ALIVE_DRIBBLER_ENCODER_WORKING_MIN            0
#define MCP_PACKET_RANGE_MCP_DRIBBLER_ALIVE_DRIBBLER_ENCODER_WORKING_MAX            1
#define MCP_PACKET_RANGE_MCP_DRIBBLER_ALIVE_BALLSENSOR_WORKING_MIN                  0
#define MCP_PACKET_RANGE_MCP_DRIBBLER_ALIVE_BALLSENSOR_WORKING_MAX                  1

#define MCP_PACKET_TYPE_MCP_SEES_BALL                                               9
#define MCP_PACKET_ID_DRIBBLER_TO_TOP_MCP_SEES_BALL                                 0x03000440
#define MCP_PACKET_SIZE_MCP_SEES_BALL                                               4
#define MCP_PACKET_RANGE_MCP_SEES_BALL_ACK_NUMBER_MIN                               0
#define MCP_PACKET_RANGE_MCP_SEES_BALL_ACK_NUMBER_MAX                               255
#define MCP_PACKET_RANGE_MCP_SEES_BALL_DRIBBLER_SPEED_BEFORE_MIN                    0.0000000000000000F
#define MCP_PACKET_RANGE_MCP_SEES_BALL_DRIBBLER_SPEED_BEFORE_MAX                    5000.0000000000000000F
#define MCP_PACKET_RANGE_MCP_SEES_BALL_DRIBBLER_SEES_BALL_MIN                       0
#define MCP_PACKET_RANGE_MCP_SEES_BALL_DRIBBLER_SEES_BALL_MAX                       1
#define MCP_PACKET_RANGE_MCP_SEES_BALL_BALLSENSOR_SEES_BALL_MIN                     0
#define MCP_PACKET_RANGE_MCP_SEES_BALL_BALLSENSOR_SEES_BALL_MAX                     1

#define MCP_PACKET_TYPE_MCP_KICKER_ALIVE                                            10
#define MCP_PACKET_ID_KICKER_TO_TOP_MCP_KICKER_ALIVE                                0x03000570
#define MCP_PACKET_ID_KICKER_TO_DRIBBLER_MCP_KICKER_ALIVE                           0x03000674
#define MCP_PACKET_ID_KICKER_TO_POWER_MCP_KICKER_ALIVE                              0x0300067f
#define MCP_PACKET_SIZE_MCP_KICKER_ALIVE                                            2
#define MCP_PACKET_RANGE_MCP_KICKER_ALIVE_ACK_NUMBER_MIN                            0
#define MCP_PACKET_RANGE_MCP_KICKER_ALIVE_ACK_NUMBER_MAX                            255
#define MCP_PACKET_RANGE_MCP_KICKER_ALIVE_SENSOR_WORKING_MIN                        0
#define MCP_PACKET_RANGE_MCP_KICKER_ALIVE_SENSOR_WORKING_MAX                        1

#define MCP_PACKET_TYPE_MCP_KICKER_CAPACITOR_VOLTAGE                                11
#define MCP_PACKET_ID_KICKER_TO_TOP_MCP_KICKER_CAPACITOR_VOLTAGE                    0x03000670
#define MCP_PACKET_SIZE_MCP_KICKER_CAPACITOR_VOLTAGE                                3
#define MCP_PACKET_RANGE_MCP_KICKER_CAPACITOR_VOLTAGE_ACK_NUMBER_MIN                0
#define MCP_PACKET_RANGE_MCP_KICKER_CAPACITOR_VOLTAGE_ACK_NUMBER_MAX                255
#define MCP_PACKET_RANGE_MCP_KICKER_CAPACITOR_VOLTAGE_VOLTAGE_MIN                   0
#define MCP_PACKET_RANGE_MCP_KICKER_CAPACITOR_VOLTAGE_VOLTAGE_MAX                   1023

#define MCP_PACKET_TYPE_MCP_KICKER_STATUS                                           12
#define MCP_PACKET_ID_KICKER_TO_TOP_MCP_KICKER_STATUS                               0x03000770
#define MCP_PACKET_SIZE_MCP_KICKER_STATUS                                           2
#define MCP_PACKET_RANGE_MCP_KICKER_STATUS_ACK_NUMBER_MIN                           0
#define MCP_PACKET_RANGE_MCP_KICKER_STATUS_ACK_NUMBER_MAX                           255
#define MCP_PACKET_RANGE_MCP_KICKER_STATUS_KICKER_ON_MIN                            0
#define MCP_PACKET_RANGE_MCP_KICKER_STATUS_KICKER_ON_MAX                            1
#define MCP_PACKET_RANGE_MCP_KICKER_STATUS_KICKER_FAULT_MIN                         0
#define MCP_PACKET_RANGE_MCP_KICKER_STATUS_KICKER_FAULT_MAX                         1
#define MCP_PACKET_RANGE_MCP_KICKER_STATUS_KICKER_READY_MIN                         0
#define MCP_PACKET_RANGE_MCP_KICKER_STATUS_KICKER_READY_MAX                         1

#define MCP_PACKET_TYPE_MCP_POWER_ALIVE                                             13
#define MCP_PACKET_ID_POWER_TO_TOP_MCP_POWER_ALIVE                                  0x030008f0
#define MCP_PACKET_ID_POWER_TO_DRIBBLER_MCP_POWER_ALIVE                             0x030007f4
#define MCP_PACKET_ID_POWER_TO_KICKER_MCP_POWER_ALIVE                               0x03000af7
#define MCP_PACKET_SIZE_MCP_POWER_ALIVE                                             4
#define MCP_PACKET_RANGE_MCP_POWER_ALIVE_ACK_NUMBER_MIN                             0
#define MCP_PACKET_RANGE_MCP_POWER_ALIVE_ACK_NUMBER_MAX                             255
#define MCP_PACKET_RANGE_MCP_POWER_ALIVE_VOLTAGE_POWER_BOARD_MIN                    15.0000000000000000F
#define MCP_PACKET_RANGE_MCP_POWER_ALIVE_VOLTAGE_POWER_BOARD_MAX                    30.0000000000000000F
#define MCP_PACKET_RANGE_MCP_POWER_ALIVE_SENSOR_WORKING_MIN                         0
#define MCP_PACKET_RANGE_MCP_POWER_ALIVE_SENSOR_WORKING_MAX                         1

#define MCP_PACKET_TYPE_MCP_POWER_VOLTAGE                                           14
#define MCP_PACKET_ID_POWER_TO_TOP_MCP_POWER_VOLTAGE                                0x030009f0
#define MCP_PACKET_ID_POWER_TO_DRIBBLER_MCP_POWER_VOLTAGE                           0x030008f4
#define MCP_PACKET_SIZE_MCP_POWER_VOLTAGE                                           3
#define MCP_PACKET_RANGE_MCP_POWER_VOLTAGE_ACK_NUMBER_MIN                           0
#define MCP_PACKET_RANGE_MCP_POWER_VOLTAGE_ACK_NUMBER_MAX                           255
#define MCP_PACKET_RANGE_MCP_POWER_VOLTAGE_VOLTAGE_POWER_BOARD_MIN                  15.0000000000000000F
#define MCP_PACKET_RANGE_MCP_POWER_VOLTAGE_VOLTAGE_POWER_BOARD_MAX                  30.0000000000000000F

#define MCP_PACKET_TYPE_MCP_KILL                                                    15
#define MCP_PACKET_ID_TOP_TO_POWER_MCP_KILL                                         0x0300070f
#define MCP_PACKET_SIZE_MCP_KILL                                                    1
#define MCP_PACKET_RANGE_MCP_KILL_ACK_NUMBER_MIN                                    0
#define MCP_PACKET_RANGE_MCP_KILL_ACK_NUMBER_MAX                                    255

#define MCP_PACKET_TYPE_MCP_DRIBBLER_ENCODER                                        16
#define MCP_PACKET_ID_DRIBBLER_TO_TOP_MCP_DRIBBLER_ENCODER                          0x03000a40
#define MCP_PACKET_SIZE_MCP_DRIBBLER_ENCODER                                        5
#define MCP_PACKET_RANGE_MCP_DRIBBLER_ENCODER_ACK_NUMBER_MIN                        0
#define MCP_PACKET_RANGE_MCP_DRIBBLER_ENCODER_ACK_NUMBER_MAX                        255
#define MCP_PACKET_RANGE_MCP_DRIBBLER_ENCODER_MEASURED_SPEED_MIN                    0.0000000000000000F
#define MCP_PACKET_RANGE_MCP_DRIBBLER_ENCODER_MEASURED_SPEED_MAX                    5000.0000000000000000F
#define MCP_PACKET_RANGE_MCP_DRIBBLER_ENCODER_FILTERED_SPEED_MIN                    0.0000000000000000F
#define MCP_PACKET_RANGE_MCP_DRIBBLER_ENCODER_FILTERED_SPEED_MAX                    5000.0000000000000000F

#define MCP_PACKET_TYPE_MCP_STOP_SENDING                                            17
#define MCP_PACKET_ID_TOP_TO_DRIBBLER_MCP_STOP_SENDING                              0x03000904
#define MCP_PACKET_ID_TOP_TO_KICKER_MCP_STOP_SENDING                                0x03000b07
#define MCP_PACKET_ID_TOP_TO_POWER_MCP_STOP_SENDING                                 0x0300080f
#define MCP_PACKET_SIZE_MCP_STOP_SENDING                                            1
#define MCP_PACKET_RANGE_MCP_STOP_SENDING_ACK_NUMBER_MIN                            0
#define MCP_PACKET_RANGE_MCP_STOP_SENDING_ACK_NUMBER_MAX                            255


static uint8_t MCP_TYPE_TO_SIZE(uint16_t type) {
    if (type == MCP_PACKET_TYPE_MCP_ACK)                                       return MCP_PACKET_SIZE_MCP_ACK;
    if (type == MCP_PACKET_TYPE_MCP_REBOOT)                                    return MCP_PACKET_SIZE_MCP_REBOOT;
    if (type == MCP_PACKET_TYPE_MCP_ARE_YOU_ALIVE)                             return MCP_PACKET_SIZE_MCP_ARE_YOU_ALIVE;
    if (type == MCP_PACKET_TYPE_MCP_DRIBBLER_COMMAND)                          return MCP_PACKET_SIZE_MCP_DRIBBLER_COMMAND;
    if (type == MCP_PACKET_TYPE_MCP_KICKER_CHARGE)                             return MCP_PACKET_SIZE_MCP_KICKER_CHARGE;
    if (type == MCP_PACKET_TYPE_MCP_KICKER_STOP_CHARGE)                        return MCP_PACKET_SIZE_MCP_KICKER_STOP_CHARGE;
    if (type == MCP_PACKET_TYPE_MCP_KICK)                                      return MCP_PACKET_SIZE_MCP_KICK;
    if (type == MCP_PACKET_TYPE_MCP_CHIP)                                      return MCP_PACKET_SIZE_MCP_CHIP;
    if (type == MCP_PACKET_TYPE_MCP_DRIBBLER_ALIVE)                            return MCP_PACKET_SIZE_MCP_DRIBBLER_ALIVE;
    if (type == MCP_PACKET_TYPE_MCP_SEES_BALL)                                 return MCP_PACKET_SIZE_MCP_SEES_BALL;
    if (type == MCP_PACKET_TYPE_MCP_KICKER_ALIVE)                              return MCP_PACKET_SIZE_MCP_KICKER_ALIVE;
    if (type == MCP_PACKET_TYPE_MCP_KICKER_CAPACITOR_VOLTAGE)                  return MCP_PACKET_SIZE_MCP_KICKER_CAPACITOR_VOLTAGE;
    if (type == MCP_PACKET_TYPE_MCP_KICKER_STATUS)                             return MCP_PACKET_SIZE_MCP_KICKER_STATUS;
    if (type == MCP_PACKET_TYPE_MCP_POWER_ALIVE)                               return MCP_PACKET_SIZE_MCP_POWER_ALIVE;
    if (type == MCP_PACKET_TYPE_MCP_POWER_VOLTAGE)                             return MCP_PACKET_SIZE_MCP_POWER_VOLTAGE;
    if (type == MCP_PACKET_TYPE_MCP_KILL)                                      return MCP_PACKET_SIZE_MCP_KILL;
    if (type == MCP_PACKET_TYPE_MCP_DRIBBLER_ENCODER)                          return MCP_PACKET_SIZE_MCP_DRIBBLER_ENCODER;
    if (type == MCP_PACKET_TYPE_MCP_STOP_SENDING)                              return MCP_PACKET_SIZE_MCP_STOP_SENDING;
    return 1;
}

static uint32_t MCP_TYPE_TO_ID(uint16_t type, uint8_t receiving_board, uint8_t sending_board) {
    if (sending_board == MCP_TOP_BOARD){
        if (receiving_board == MCP_DRIBBLER_BOARD) {
            if (type == MCP_PACKET_TYPE_MCP_ACK)                                       return MCP_PACKET_ID_TOP_TO_DRIBBLER_MCP_ACK                               ;
            if (type == MCP_PACKET_TYPE_MCP_REBOOT)                                    return MCP_PACKET_ID_TOP_TO_DRIBBLER_MCP_REBOOT                            ;
            if (type == MCP_PACKET_TYPE_MCP_ARE_YOU_ALIVE)                             return MCP_PACKET_ID_TOP_TO_DRIBBLER_MCP_ARE_YOU_ALIVE                     ;
            if (type == MCP_PACKET_TYPE_MCP_DRIBBLER_COMMAND)                          return MCP_PACKET_ID_TOP_TO_DRIBBLER_MCP_DRIBBLER_COMMAND                  ;
            if (type == MCP_PACKET_TYPE_MCP_STOP_SENDING)                              return MCP_PACKET_ID_TOP_TO_DRIBBLER_MCP_STOP_SENDING                      ;
        } else if (receiving_board == MCP_KICKER_BOARD) {
            if (type == MCP_PACKET_TYPE_MCP_ACK)                                       return MCP_PACKET_ID_TOP_TO_KICKER_MCP_ACK                                 ;
            if (type == MCP_PACKET_TYPE_MCP_REBOOT)                                    return MCP_PACKET_ID_TOP_TO_KICKER_MCP_REBOOT                              ;
            if (type == MCP_PACKET_TYPE_MCP_ARE_YOU_ALIVE)                             return MCP_PACKET_ID_TOP_TO_KICKER_MCP_ARE_YOU_ALIVE                       ;
            if (type == MCP_PACKET_TYPE_MCP_KICKER_CHARGE)                             return MCP_PACKET_ID_TOP_TO_KICKER_MCP_KICKER_CHARGE                       ;
            if (type == MCP_PACKET_TYPE_MCP_KICKER_STOP_CHARGE)                        return MCP_PACKET_ID_TOP_TO_KICKER_MCP_KICKER_STOP_CHARGE                  ;
            if (type == MCP_PACKET_TYPE_MCP_KICK)                                      return MCP_PACKET_ID_TOP_TO_KICKER_MCP_KICK                                ;
            if (type == MCP_PACKET_TYPE_MCP_CHIP)                                      return MCP_PACKET_ID_TOP_TO_KICKER_MCP_CHIP                                ;
            if (type == MCP_PACKET_TYPE_MCP_STOP_SENDING)                              return MCP_PACKET_ID_TOP_TO_KICKER_MCP_STOP_SENDING                        ;
        } else if (receiving_board == MCP_POWER_BOARD) {
            if (type == MCP_PACKET_TYPE_MCP_ACK)                                       return MCP_PACKET_ID_TOP_TO_POWER_MCP_ACK                                  ;
            if (type == MCP_PACKET_TYPE_MCP_REBOOT)                                    return MCP_PACKET_ID_TOP_TO_POWER_MCP_REBOOT                               ;
            if (type == MCP_PACKET_TYPE_MCP_ARE_YOU_ALIVE)                             return MCP_PACKET_ID_TOP_TO_POWER_MCP_ARE_YOU_ALIVE                        ;
            if (type == MCP_PACKET_TYPE_MCP_KILL)                                      return MCP_PACKET_ID_TOP_TO_POWER_MCP_KILL                                 ;
            if (type == MCP_PACKET_TYPE_MCP_STOP_SENDING)                              return MCP_PACKET_ID_TOP_TO_POWER_MCP_STOP_SENDING                         ;
        }
    } else if (sending_board == MCP_DRIBBLER_BOARD){
        if (receiving_board == MCP_TOP_BOARD) {
            if (type == MCP_PACKET_TYPE_MCP_ACK)                                       return MCP_PACKET_ID_DRIBBLER_TO_TOP_MCP_ACK                               ;
            if (type == MCP_PACKET_TYPE_MCP_DRIBBLER_ALIVE)                            return MCP_PACKET_ID_DRIBBLER_TO_TOP_MCP_DRIBBLER_ALIVE                    ;
            if (type == MCP_PACKET_TYPE_MCP_SEES_BALL)                                 return MCP_PACKET_ID_DRIBBLER_TO_TOP_MCP_SEES_BALL                         ;
            if (type == MCP_PACKET_TYPE_MCP_DRIBBLER_ENCODER)                          return MCP_PACKET_ID_DRIBBLER_TO_TOP_MCP_DRIBBLER_ENCODER                  ;
        } else if (receiving_board == MCP_KICKER_BOARD) {
            if (type == MCP_PACKET_TYPE_MCP_ACK)                                       return MCP_PACKET_ID_DRIBBLER_TO_KICKER_MCP_ACK                            ;
            if (type == MCP_PACKET_TYPE_MCP_DRIBBLER_ALIVE)                            return MCP_PACKET_ID_DRIBBLER_TO_KICKER_MCP_DRIBBLER_ALIVE                 ;
        } else if (receiving_board == MCP_POWER_BOARD) {
            if (type == MCP_PACKET_TYPE_MCP_ACK)                                       return MCP_PACKET_ID_DRIBBLER_TO_POWER_MCP_ACK                             ;
            if (type == MCP_PACKET_TYPE_MCP_DRIBBLER_ALIVE)                            return MCP_PACKET_ID_DRIBBLER_TO_POWER_MCP_DRIBBLER_ALIVE                  ;
        }
    } else if (sending_board == MCP_KICKER_BOARD){
        if (receiving_board == MCP_TOP_BOARD) {
            if (type == MCP_PACKET_TYPE_MCP_ACK)                                       return MCP_PACKET_ID_KICKER_TO_TOP_MCP_ACK                                 ;
            if (type == MCP_PACKET_TYPE_MCP_KICKER_ALIVE)                              return MCP_PACKET_ID_KICKER_TO_TOP_MCP_KICKER_ALIVE                        ;
            if (type == MCP_PACKET_TYPE_MCP_KICKER_CAPACITOR_VOLTAGE)                  return MCP_PACKET_ID_KICKER_TO_TOP_MCP_KICKER_CAPACITOR_VOLTAGE            ;
            if (type == MCP_PACKET_TYPE_MCP_KICKER_STATUS)                             return MCP_PACKET_ID_KICKER_TO_TOP_MCP_KICKER_STATUS                       ;
        } else if (receiving_board == MCP_DRIBBLER_BOARD) {
            if (type == MCP_PACKET_TYPE_MCP_ACK)                                       return MCP_PACKET_ID_KICKER_TO_DRIBBLER_MCP_ACK                            ;
            if (type == MCP_PACKET_TYPE_MCP_KICKER_ALIVE)                              return MCP_PACKET_ID_KICKER_TO_DRIBBLER_MCP_KICKER_ALIVE                   ;
        } else if (receiving_board == MCP_POWER_BOARD) {
            if (type == MCP_PACKET_TYPE_MCP_ACK)                                       return MCP_PACKET_ID_KICKER_TO_POWER_MCP_ACK                               ;
            if (type == MCP_PACKET_TYPE_MCP_KICKER_ALIVE)                              return MCP_PACKET_ID_KICKER_TO_POWER_MCP_KICKER_ALIVE                      ;
        }
    } else if (sending_board == MCP_POWER_BOARD){
        if (receiving_board == MCP_TOP_BOARD) {
            if (type == MCP_PACKET_TYPE_MCP_ACK)                                       return MCP_PACKET_ID_POWER_TO_TOP_MCP_ACK                                  ;
            if (type == MCP_PACKET_TYPE_MCP_POWER_ALIVE)                               return MCP_PACKET_ID_POWER_TO_TOP_MCP_POWER_ALIVE                          ;
            if (type == MCP_PACKET_TYPE_MCP_POWER_VOLTAGE)                             return MCP_PACKET_ID_POWER_TO_TOP_MCP_POWER_VOLTAGE                        ;
        } else if (receiving_board == MCP_DRIBBLER_BOARD) {
            if (type == MCP_PACKET_TYPE_MCP_ACK)                                       return MCP_PACKET_ID_POWER_TO_DRIBBLER_MCP_ACK                             ;
            if (type == MCP_PACKET_TYPE_MCP_POWER_ALIVE)                               return MCP_PACKET_ID_POWER_TO_DRIBBLER_MCP_POWER_ALIVE                     ;
            if (type == MCP_PACKET_TYPE_MCP_POWER_VOLTAGE)                             return MCP_PACKET_ID_POWER_TO_DRIBBLER_MCP_POWER_VOLTAGE                   ;
        } else if (receiving_board == MCP_KICKER_BOARD) {
            if (type == MCP_PACKET_TYPE_MCP_ACK)                                       return MCP_PACKET_ID_POWER_TO_KICKER_MCP_ACK                               ;
            if (type == MCP_PACKET_TYPE_MCP_POWER_ALIVE)                               return MCP_PACKET_ID_POWER_TO_KICKER_MCP_POWER_ALIVE                       ;
        }
    }
    return 0x10000000;

}

static bool MCP_ID_IS_TYPE_ACK(uint32_t id) {
    if (id == MCP_PACKET_ID_POWER_TO_KICKER_MCP_ACK) return true;
    if (id == MCP_PACKET_ID_POWER_TO_DRIBBLER_MCP_ACK) return true;
    if (id == MCP_PACKET_ID_POWER_TO_TOP_MCP_ACK) return true;
    if (id == MCP_PACKET_ID_KICKER_TO_POWER_MCP_ACK) return true;
    if (id == MCP_PACKET_ID_KICKER_TO_DRIBBLER_MCP_ACK) return true;
    if (id == MCP_PACKET_ID_KICKER_TO_TOP_MCP_ACK) return true;
    if (id == MCP_PACKET_ID_DRIBBLER_TO_POWER_MCP_ACK) return true;
    if (id == MCP_PACKET_ID_DRIBBLER_TO_KICKER_MCP_ACK) return true;
    if (id == MCP_PACKET_ID_DRIBBLER_TO_TOP_MCP_ACK) return true;
    if (id == MCP_PACKET_ID_TOP_TO_POWER_MCP_ACK) return true;
    if (id == MCP_PACKET_ID_TOP_TO_KICKER_MCP_ACK) return true;
    if (id == MCP_PACKET_ID_TOP_TO_DRIBBLER_MCP_ACK) return true;
    return false; 
}

static bool MCP_ID_IS_TYPE_ALIVE(uint32_t id) {
    if (id == MCP_PACKET_ID_TOP_TO_POWER_MCP_ARE_YOU_ALIVE) return true;
    if (id == MCP_PACKET_ID_TOP_TO_KICKER_MCP_ARE_YOU_ALIVE) return true;
    if (id == MCP_PACKET_ID_TOP_TO_DRIBBLER_MCP_ARE_YOU_ALIVE) return true;
    if (id == MCP_PACKET_ID_DRIBBLER_TO_TOP_MCP_DRIBBLER_ALIVE) return true;
    if (id == MCP_PACKET_ID_DRIBBLER_TO_KICKER_MCP_DRIBBLER_ALIVE) return true;
    if (id == MCP_PACKET_ID_DRIBBLER_TO_POWER_MCP_DRIBBLER_ALIVE) return true;
    if (id == MCP_PACKET_ID_KICKER_TO_TOP_MCP_KICKER_ALIVE) return true;
    if (id == MCP_PACKET_ID_KICKER_TO_DRIBBLER_MCP_KICKER_ALIVE) return true;
    if (id == MCP_PACKET_ID_KICKER_TO_POWER_MCP_KICKER_ALIVE) return true;
    if (id == MCP_PACKET_ID_POWER_TO_TOP_MCP_POWER_ALIVE) return true;
    if (id == MCP_PACKET_ID_POWER_TO_DRIBBLER_MCP_POWER_ALIVE) return true;
    if (id == MCP_PACKET_ID_POWER_TO_KICKER_MCP_POWER_ALIVE) return true;
    return false; 
}

#endif /* __MCP_BASETYPES_H */
