// AUTOGENERATED. Run generator/main.py to regenerate
/*
[  0   ] [  1   ] [  2   ]
11111111 -------- -------- ack_number
-------- 11111111 11111111 value
*/

#ifndef __MCP_DRIBBLER_ENCODER_H
#define __MCP_DRIBBLER_ENCODER_H

#include <stdbool.h>
#include <stdint.h>
#include "MCP_BaseTypes.h"

typedef struct _MCP_DribblerEncoderPayload {
    uint8_t payload[MCP_PACKET_SIZE_MCP_DRIBBLER_ENCODER];
} MCP_DribblerEncoderPayload;

typedef struct _MCP_DribblerEncoder {
    uint32_t   ack_number          ; // integer [0, 255]             acknowledgements
    float      value               ; // float   [0.000, 5000.000]    Dribbler speed
} MCP_DribblerEncoder;

// ================================ GETTERS ================================
static inline uint32_t MCP_DribblerEncoder_get_ack_number(MCP_DribblerEncoderPayload *mcpdep){
   return ((mcpdep->payload[0]));
}

static inline float MCP_DribblerEncoder_get_value(MCP_DribblerEncoderPayload *mcpdep){
    uint32_t _value = ((mcpdep->payload[1]) << 8) | ((mcpdep->payload[2]));
    return (_value * 0.0762951094834821F);
}

// ================================ SETTERS ================================
static inline void MCP_DribblerEncoder_set_ack_number(MCP_DribblerEncoderPayload *mcpdep, uint32_t ack_number){
    mcpdep->payload[0] = ack_number;
}

static inline void MCP_DribblerEncoder_set_value(MCP_DribblerEncoderPayload *mcpdep, float value){
    uint32_t _value = (uint32_t)(value / 0.0762951094834821F);
    mcpdep->payload[1] = (_value >> 8);
    mcpdep->payload[2] = _value;
}

// ================================ ENCODE ================================
static inline void encodeMCP_DribblerEncoder(MCP_DribblerEncoderPayload *mcpdep, MCP_DribblerEncoder *mcpde){
    MCP_DribblerEncoder_set_ack_number          (mcpdep, mcpde->ack_number);
    MCP_DribblerEncoder_set_value               (mcpdep, mcpde->value);
}

// ================================ DECODE ================================
static inline void decodeMCP_DribblerEncoder(MCP_DribblerEncoder *mcpde, MCP_DribblerEncoderPayload *mcpdep){
    mcpde->ack_number    = MCP_DribblerEncoder_get_ack_number(mcpdep);
    mcpde->value         = MCP_DribblerEncoder_get_value(mcpdep);
}

#endif /*__MCP_DRIBBLER_ENCODER_H*/
