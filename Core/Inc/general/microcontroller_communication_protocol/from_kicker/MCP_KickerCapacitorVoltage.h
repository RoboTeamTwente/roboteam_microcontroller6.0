// AUTOGENERATED. Run generator/main.py to regenerate
/*
[  0   ] [  1   ] [  2   ]
11111111 -------- -------- ack_number
-------- 11111111 11------ voltage
*/

#ifndef __MCP_KICKER_CAPACITOR_VOLTAGE_H
#define __MCP_KICKER_CAPACITOR_VOLTAGE_H

#include <stdbool.h>
#include <stdint.h>
#include "MCP_BaseTypes.h"

typedef struct _MCP_KickerCapacitorVoltagePayload {
    uint8_t payload[MCP_PACKET_SIZE_MCP_KICKER_CAPACITOR_VOLTAGE];
} MCP_KickerCapacitorVoltagePayload;

typedef struct _MCP_KickerCapacitorVoltage {
    uint32_t   ack_number          ; // integer [0, 255]             acknowledgements
    uint32_t   voltage             ; // integer [0, 1023]            capacitor voltage
} MCP_KickerCapacitorVoltage;

// ================================ GETTERS ================================
static inline uint32_t MCP_KickerCapacitorVoltage_get_ack_number(MCP_KickerCapacitorVoltagePayload *mcpkcvp){
   return ((mcpkcvp->payload[0]));
}

static inline uint32_t MCP_KickerCapacitorVoltage_get_voltage(MCP_KickerCapacitorVoltagePayload *mcpkcvp){
   return ((mcpkcvp->payload[1]) << 2) | ((mcpkcvp->payload[2] & 0b11000000) >> 6);
}

// ================================ SETTERS ================================
static inline void MCP_KickerCapacitorVoltage_set_ack_number(MCP_KickerCapacitorVoltagePayload *mcpkcvp, uint32_t ack_number){
    mcpkcvp->payload[0] = ack_number;
}

static inline void MCP_KickerCapacitorVoltage_set_voltage(MCP_KickerCapacitorVoltagePayload *mcpkcvp, uint32_t voltage){
    mcpkcvp->payload[1] = (voltage >> 2);
    mcpkcvp->payload[2] = ((voltage << 6) & 0b11000000) | (mcpkcvp->payload[2] & 0b00111111);
}

// ================================ ENCODE ================================
static inline void encodeMCP_KickerCapacitorVoltage(MCP_KickerCapacitorVoltagePayload *mcpkcvp, MCP_KickerCapacitorVoltage *mcpkcv){
    MCP_KickerCapacitorVoltage_set_ack_number          (mcpkcvp, mcpkcv->ack_number);
    MCP_KickerCapacitorVoltage_set_voltage             (mcpkcvp, mcpkcv->voltage);
}

// ================================ DECODE ================================
static inline void decodeMCP_KickerCapacitorVoltage(MCP_KickerCapacitorVoltage *mcpkcv, MCP_KickerCapacitorVoltagePayload *mcpkcvp){
    mcpkcv->ack_number   = MCP_KickerCapacitorVoltage_get_ack_number(mcpkcvp);
    mcpkcv->voltage      = MCP_KickerCapacitorVoltage_get_voltage(mcpkcvp);
}

#endif /*__MCP_KICKER_CAPACITOR_VOLTAGE_H*/
