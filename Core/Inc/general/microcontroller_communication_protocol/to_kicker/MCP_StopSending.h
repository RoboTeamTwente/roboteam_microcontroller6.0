// AUTOGENERATED. Run generator/main.py to regenerate
/*
[  0   ]
11111111 ack_number
*/

#ifndef __MCP_STOP_SENDING_H
#define __MCP_STOP_SENDING_H

#include <stdbool.h>
#include <stdint.h>
#include "MCP_BaseTypes.h"

typedef struct _MCP_StopSendingPayload {
    uint8_t payload[MCP_PACKET_SIZE_MCP_STOP_SENDING];
} MCP_StopSendingPayload;

typedef struct _MCP_StopSending {
    uint32_t   ack_number          ; // integer [0, 255]             acknowledgements
} MCP_StopSending;

// ================================ GETTERS ================================
static inline uint32_t MCP_StopSending_get_ack_number(MCP_StopSendingPayload *mcpssp){
   return ((mcpssp->payload[0]));
}

// ================================ SETTERS ================================
static inline void MCP_StopSending_set_ack_number(MCP_StopSendingPayload *mcpssp, uint32_t ack_number){
    mcpssp->payload[0] = ack_number;
}

// ================================ ENCODE ================================
static inline void encodeMCP_StopSending(MCP_StopSendingPayload *mcpssp, MCP_StopSending *mcpss){
    MCP_StopSending_set_ack_number          (mcpssp, mcpss->ack_number);
}

// ================================ DECODE ================================
static inline void decodeMCP_StopSending(MCP_StopSending *mcpss, MCP_StopSendingPayload *mcpssp){
    mcpss->ack_number    = MCP_StopSending_get_ack_number(mcpssp);
}

#endif /*__MCP_STOP_SENDING_H*/
