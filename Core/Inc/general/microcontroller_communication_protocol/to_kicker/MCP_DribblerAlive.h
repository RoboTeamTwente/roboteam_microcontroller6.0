// AUTOGENERATED. Run generator/main.py to regenerate
/*
[  0   ] [  1   ]
11111111 -------- ack_number
-------- 1------- dribblerEncoderWorking
-------- -1------ ballsensorWorking
*/

#ifndef __MCP_DRIBBLER_ALIVE_H
#define __MCP_DRIBBLER_ALIVE_H

#include <stdbool.h>
#include <stdint.h>
#include "MCP_BaseTypes.h"

typedef struct _MCP_DribblerAlivePayload {
    uint8_t payload[MCP_PACKET_SIZE_MCP_DRIBBLER_ALIVE];
} MCP_DribblerAlivePayload;

typedef struct _MCP_DribblerAlive {
    uint32_t   ack_number          ; // integer [0, 255]             acknowledgements
    bool       dribblerEncoderWorking; // integer [0, 1]               status of dribbler encoder
    bool       ballsensorWorking   ; // integer [0, 1]               status of ballsensor
} MCP_DribblerAlive;

// ================================ GETTERS ================================
static inline uint32_t MCP_DribblerAlive_get_ack_number(MCP_DribblerAlivePayload *mcpdap){
   return ((mcpdap->payload[0]));
}

static inline bool MCP_DribblerAlive_get_dribblerEncoderWorking(MCP_DribblerAlivePayload *mcpdap){
    return (mcpdap->payload[1] & 0b10000000) > 0;
}

static inline bool MCP_DribblerAlive_get_ballsensorWorking(MCP_DribblerAlivePayload *mcpdap){
    return (mcpdap->payload[1] & 0b01000000) > 0;
}

// ================================ SETTERS ================================
static inline void MCP_DribblerAlive_set_ack_number(MCP_DribblerAlivePayload *mcpdap, uint32_t ack_number){
    mcpdap->payload[0] = ack_number;
}

static inline void MCP_DribblerAlive_set_dribblerEncoderWorking(MCP_DribblerAlivePayload *mcpdap, bool dribblerEncoderWorking){
    mcpdap->payload[1] = ((dribblerEncoderWorking << 7) & 0b10000000) | (mcpdap->payload[1] & 0b01111111);
}

static inline void MCP_DribblerAlive_set_ballsensorWorking(MCP_DribblerAlivePayload *mcpdap, bool ballsensorWorking){
    mcpdap->payload[1] = ((ballsensorWorking << 6) & 0b01000000) | (mcpdap->payload[1] & 0b10111111);
}

// ================================ ENCODE ================================
static inline void encodeMCP_DribblerAlive(MCP_DribblerAlivePayload *mcpdap, MCP_DribblerAlive *mcpda){
    MCP_DribblerAlive_set_ack_number          (mcpdap, mcpda->ack_number);
    MCP_DribblerAlive_set_dribblerEncoderWorking(mcpdap, mcpda->dribblerEncoderWorking);
    MCP_DribblerAlive_set_ballsensorWorking   (mcpdap, mcpda->ballsensorWorking);
}

// ================================ DECODE ================================
static inline void decodeMCP_DribblerAlive(MCP_DribblerAlive *mcpda, MCP_DribblerAlivePayload *mcpdap){
    mcpda->ack_number    = MCP_DribblerAlive_get_ack_number(mcpdap);
    mcpda->dribblerEncoderWorking= MCP_DribblerAlive_get_dribblerEncoderWorking(mcpdap);
    mcpda->ballsensorWorking= MCP_DribblerAlive_get_ballsensorWorking(mcpdap);
}

#endif /*__MCP_DRIBBLER_ALIVE_H*/
