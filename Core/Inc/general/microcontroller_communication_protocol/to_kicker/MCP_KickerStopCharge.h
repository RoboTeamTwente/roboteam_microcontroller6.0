// AUTOGENERATED. Run generator/main.py to regenerate
/*
[  0   ]
11111111 ack_number
*/

#ifndef __MCP_KICKER_STOP_CHARGE_H
#define __MCP_KICKER_STOP_CHARGE_H

#include <stdbool.h>
#include <stdint.h>
#include "MCP_BaseTypes.h"

typedef struct _MCP_KickerStopChargePayload {
    uint8_t payload[MCP_PACKET_SIZE_MCP_KICKER_STOP_CHARGE];
} MCP_KickerStopChargePayload;

typedef struct _MCP_KickerStopCharge {
    uint32_t   ack_number          ; // integer [0, 255]             acknowledgements
} MCP_KickerStopCharge;

// ================================ GETTERS ================================
static inline uint32_t MCP_KickerStopCharge_get_ack_number(MCP_KickerStopChargePayload *mcpkscp){
   return ((mcpkscp->payload[0]));
}

// ================================ SETTERS ================================
static inline void MCP_KickerStopCharge_set_ack_number(MCP_KickerStopChargePayload *mcpkscp, uint32_t ack_number){
    mcpkscp->payload[0] = ack_number;
}

// ================================ ENCODE ================================
static inline void encodeMCP_KickerStopCharge(MCP_KickerStopChargePayload *mcpkscp, MCP_KickerStopCharge *mcpksc){
    MCP_KickerStopCharge_set_ack_number          (mcpkscp, mcpksc->ack_number);
}

// ================================ DECODE ================================
static inline void decodeMCP_KickerStopCharge(MCP_KickerStopCharge *mcpksc, MCP_KickerStopChargePayload *mcpkscp){
    mcpksc->ack_number   = MCP_KickerStopCharge_get_ack_number(mcpkscp);
}

#endif /*__MCP_KICKER_STOP_CHARGE_H*/
