// AUTOGENERATED. Run generator/main.py to regenerate
/*
[  0   ]
11111111 ack_number
*/

#ifndef __MCP_REBOOT_H
#define __MCP_REBOOT_H

#include <stdbool.h>
#include <stdint.h>
#include "MCP_BaseTypes.h"

typedef struct _MCP_RebootPayload {
    uint8_t payload[MCP_PACKET_SIZE_MCP_REBOOT];
} MCP_RebootPayload;

typedef struct _MCP_Reboot {
    uint32_t   ack_number          ; // integer [0, 255]             acknowledgements
} MCP_Reboot;

// ================================ GETTERS ================================
static inline uint32_t MCP_Reboot_get_ack_number(MCP_RebootPayload *mcprp){
   return ((mcprp->payload[0]));
}

// ================================ SETTERS ================================
static inline void MCP_Reboot_set_ack_number(MCP_RebootPayload *mcprp, uint32_t ack_number){
    mcprp->payload[0] = ack_number;
}

// ================================ ENCODE ================================
static inline void encodeMCP_Reboot(MCP_RebootPayload *mcprp, MCP_Reboot *mcpr){
    MCP_Reboot_set_ack_number          (mcprp, mcpr->ack_number);
}

// ================================ DECODE ================================
static inline void decodeMCP_Reboot(MCP_Reboot *mcpr, MCP_RebootPayload *mcprp){
    mcpr->ack_number     = MCP_Reboot_get_ack_number(mcprp);
}

#endif /*__MCP_REBOOT_H*/
