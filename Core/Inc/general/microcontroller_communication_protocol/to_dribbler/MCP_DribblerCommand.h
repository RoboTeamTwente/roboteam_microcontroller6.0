// AUTOGENERATED. Run generator/main.py to regenerate
/*
[  0   ] [  1   ]
11111111 -------- ack_number
-------- 1------- dribblerOn
-------- -1------ dribblerOption1
-------- --1----- dribblerOption2
-------- ---1---- dribblerOption3
-------- ----1--- dribblerOption4
-------- -----1-- dribblerOption5
-------- ------1- dribblerOption6
-------- -------1 SystemTest
*/

#ifndef __MCP_DRIBBLER_COMMAND_H
#define __MCP_DRIBBLER_COMMAND_H

#include <stdbool.h>
#include <stdint.h>
#include "MCP_BaseTypes.h"

typedef struct _MCP_DribblerCommandPayload {
    uint8_t payload[MCP_PACKET_SIZE_MCP_DRIBBLER_COMMAND];
} MCP_DribblerCommandPayload;

typedef struct _MCP_DribblerCommand {
    uint32_t   ack_number          ; // integer [0, 255]             acknowledgements
    bool       dribblerOn          ; // integer [0, 1]               Dribbler on/off
    bool       dribblerOption1     ; // integer [0, 1]               Dribbler option 1
    bool       dribblerOption2     ; // integer [0, 1]               Dribbler option 2
    bool       dribblerOption3     ; // integer [0, 1]               Dribbler option 3
    bool       dribblerOption4     ; // integer [0, 1]               Dribbler option 4
    bool       dribblerOption5     ; // integer [0, 1]               Dribbler option 5
    bool       dribblerOption6     ; // integer [0, 1]               Dribbler option 6
    bool       SystemTest          ; // integer [0, 1]               Spin the dribbler bar during system test
} MCP_DribblerCommand;

// ================================ GETTERS ================================
static inline uint32_t MCP_DribblerCommand_get_ack_number(MCP_DribblerCommandPayload *mcpdcp){
   return ((mcpdcp->payload[0]));
}

static inline bool MCP_DribblerCommand_get_dribblerOn(MCP_DribblerCommandPayload *mcpdcp){
    return (mcpdcp->payload[1] & 0b10000000) > 0;
}

static inline bool MCP_DribblerCommand_get_dribblerOption1(MCP_DribblerCommandPayload *mcpdcp){
    return (mcpdcp->payload[1] & 0b01000000) > 0;
}

static inline bool MCP_DribblerCommand_get_dribblerOption2(MCP_DribblerCommandPayload *mcpdcp){
    return (mcpdcp->payload[1] & 0b00100000) > 0;
}

static inline bool MCP_DribblerCommand_get_dribblerOption3(MCP_DribblerCommandPayload *mcpdcp){
    return (mcpdcp->payload[1] & 0b00010000) > 0;
}

static inline bool MCP_DribblerCommand_get_dribblerOption4(MCP_DribblerCommandPayload *mcpdcp){
    return (mcpdcp->payload[1] & 0b00001000) > 0;
}

static inline bool MCP_DribblerCommand_get_dribblerOption5(MCP_DribblerCommandPayload *mcpdcp){
    return (mcpdcp->payload[1] & 0b00000100) > 0;
}

static inline bool MCP_DribblerCommand_get_dribblerOption6(MCP_DribblerCommandPayload *mcpdcp){
    return (mcpdcp->payload[1] & 0b00000010) > 0;
}

static inline bool MCP_DribblerCommand_get_SystemTest(MCP_DribblerCommandPayload *mcpdcp){
    return (mcpdcp->payload[1] & 0b00000001) > 0;
}

// ================================ SETTERS ================================
static inline void MCP_DribblerCommand_set_ack_number(MCP_DribblerCommandPayload *mcpdcp, uint32_t ack_number){
    mcpdcp->payload[0] = ack_number;
}

static inline void MCP_DribblerCommand_set_dribblerOn(MCP_DribblerCommandPayload *mcpdcp, bool dribblerOn){
    mcpdcp->payload[1] = ((dribblerOn << 7) & 0b10000000) | (mcpdcp->payload[1] & 0b01111111);
}

static inline void MCP_DribblerCommand_set_dribblerOption1(MCP_DribblerCommandPayload *mcpdcp, bool dribblerOption1){
    mcpdcp->payload[1] = ((dribblerOption1 << 6) & 0b01000000) | (mcpdcp->payload[1] & 0b10111111);
}

static inline void MCP_DribblerCommand_set_dribblerOption2(MCP_DribblerCommandPayload *mcpdcp, bool dribblerOption2){
    mcpdcp->payload[1] = ((dribblerOption2 << 5) & 0b00100000) | (mcpdcp->payload[1] & 0b11011111);
}

static inline void MCP_DribblerCommand_set_dribblerOption3(MCP_DribblerCommandPayload *mcpdcp, bool dribblerOption3){
    mcpdcp->payload[1] = ((dribblerOption3 << 4) & 0b00010000) | (mcpdcp->payload[1] & 0b11101111);
}

static inline void MCP_DribblerCommand_set_dribblerOption4(MCP_DribblerCommandPayload *mcpdcp, bool dribblerOption4){
    mcpdcp->payload[1] = ((dribblerOption4 << 3) & 0b00001000) | (mcpdcp->payload[1] & 0b11110111);
}

static inline void MCP_DribblerCommand_set_dribblerOption5(MCP_DribblerCommandPayload *mcpdcp, bool dribblerOption5){
    mcpdcp->payload[1] = ((dribblerOption5 << 2) & 0b00000100) | (mcpdcp->payload[1] & 0b11111011);
}

static inline void MCP_DribblerCommand_set_dribblerOption6(MCP_DribblerCommandPayload *mcpdcp, bool dribblerOption6){
    mcpdcp->payload[1] = ((dribblerOption6 << 1) & 0b00000010) | (mcpdcp->payload[1] & 0b11111101);
}

static inline void MCP_DribblerCommand_set_SystemTest(MCP_DribblerCommandPayload *mcpdcp, bool SystemTest){
    mcpdcp->payload[1] = (SystemTest & 0b00000001) | (mcpdcp->payload[1] & 0b11111110);
}

// ================================ ENCODE ================================
static inline void encodeMCP_DribblerCommand(MCP_DribblerCommandPayload *mcpdcp, MCP_DribblerCommand *mcpdc){
    MCP_DribblerCommand_set_ack_number          (mcpdcp, mcpdc->ack_number);
    MCP_DribblerCommand_set_dribblerOn          (mcpdcp, mcpdc->dribblerOn);
    MCP_DribblerCommand_set_dribblerOption1     (mcpdcp, mcpdc->dribblerOption1);
    MCP_DribblerCommand_set_dribblerOption2     (mcpdcp, mcpdc->dribblerOption2);
    MCP_DribblerCommand_set_dribblerOption3     (mcpdcp, mcpdc->dribblerOption3);
    MCP_DribblerCommand_set_dribblerOption4     (mcpdcp, mcpdc->dribblerOption4);
    MCP_DribblerCommand_set_dribblerOption5     (mcpdcp, mcpdc->dribblerOption5);
    MCP_DribblerCommand_set_dribblerOption6     (mcpdcp, mcpdc->dribblerOption6);
    MCP_DribblerCommand_set_SystemTest          (mcpdcp, mcpdc->SystemTest);
}

// ================================ DECODE ================================
static inline void decodeMCP_DribblerCommand(MCP_DribblerCommand *mcpdc, MCP_DribblerCommandPayload *mcpdcp){
    mcpdc->ack_number    = MCP_DribblerCommand_get_ack_number(mcpdcp);
    mcpdc->dribblerOn    = MCP_DribblerCommand_get_dribblerOn(mcpdcp);
    mcpdc->dribblerOption1= MCP_DribblerCommand_get_dribblerOption1(mcpdcp);
    mcpdc->dribblerOption2= MCP_DribblerCommand_get_dribblerOption2(mcpdcp);
    mcpdc->dribblerOption3= MCP_DribblerCommand_get_dribblerOption3(mcpdcp);
    mcpdc->dribblerOption4= MCP_DribblerCommand_get_dribblerOption4(mcpdcp);
    mcpdc->dribblerOption5= MCP_DribblerCommand_get_dribblerOption5(mcpdcp);
    mcpdc->dribblerOption6= MCP_DribblerCommand_get_dribblerOption6(mcpdcp);
    mcpdc->SystemTest    = MCP_DribblerCommand_get_SystemTest(mcpdcp);
}

#endif /*__MCP_DRIBBLER_COMMAND_H*/
