// AUTOGENERATED. Run generator/main.py to regenerate
/*
[  0   ]
1111---- shootPower
*/

#ifndef __MCP_KICK_H
#define __MCP_KICK_H

#include <stdbool.h>
#include <stdint.h>
#include "MCP_BaseTypes.h"

typedef struct _MCP_KickPayload {
    uint8_t payload[MCP_PACKET_SIZE_MCP_KICK];
} MCP_KickPayload;

typedef struct _MCP_Kick {
    float      shootPower          ; // float   [0.000, 6.500]       desired speed of the ball
} MCP_Kick;

// ================================ GETTERS ================================
static inline float MCP_Kick_get_shootPower(MCP_KickPayload *mcpkp){
    uint32_t _shootPower = ((mcpkp->payload[0] & 0b11110000) >> 4);
    return (_shootPower * 0.4333333333333333F);
}

// ================================ SETTERS ================================
static inline void MCP_Kick_set_shootPower(MCP_KickPayload *mcpkp, float shootPower){
    uint32_t _shootPower = (uint32_t)(shootPower / 0.4333333333333333F);
    mcpkp->payload[0] = ((_shootPower << 4) & 0b11110000) | (mcpkp->payload[0] & 0b00001111);
}

// ================================ ENCODE ================================
static inline void encodeMCP_Kick(MCP_KickPayload *mcpkp, MCP_Kick *mcpk){
    MCP_Kick_set_shootPower          (mcpkp, mcpk->shootPower);
}

// ================================ DECODE ================================
static inline void decodeMCP_Kick(MCP_Kick *mcpk, MCP_KickPayload *mcpkp){
    mcpk->shootPower     = MCP_Kick_get_shootPower(mcpkp);
}

#endif /*__MCP_KICK_H*/
