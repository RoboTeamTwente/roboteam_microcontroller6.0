// AUTOGENERATED. Run generator/main.py to regenerate
/*
[  0   ] [  1   ]
11111111 11------ voltage
*/

#ifndef __MCP_KICKER_CHARGE_H
#define __MCP_KICKER_CHARGE_H

#include <stdbool.h>
#include <stdint.h>
#include "MCP_BaseTypes.h"

typedef struct _MCP_KickerChargePayload {
    uint8_t payload[MCP_PACKET_SIZE_MCP_KICKER_CHARGE];
} MCP_KickerChargePayload;

typedef struct _MCP_KickerCharge {
    uint32_t   voltage             ; // integer [0, 1023]            target voltage
} MCP_KickerCharge;

// ================================ GETTERS ================================
static inline uint32_t MCP_KickerCharge_get_voltage(MCP_KickerChargePayload *mcpkcp){
   return ((mcpkcp->payload[0]) << 2) | ((mcpkcp->payload[1] & 0b11000000) >> 6);
}

// ================================ SETTERS ================================
static inline void MCP_KickerCharge_set_voltage(MCP_KickerChargePayload *mcpkcp, uint32_t voltage){
    mcpkcp->payload[0] = (voltage >> 2);
    mcpkcp->payload[1] = ((voltage << 6) & 0b11000000) | (mcpkcp->payload[1] & 0b00111111);
}

// ================================ ENCODE ================================
static inline void encodeMCP_KickerCharge(MCP_KickerChargePayload *mcpkcp, MCP_KickerCharge *mcpkc){
    MCP_KickerCharge_set_voltage             (mcpkcp, mcpkc->voltage);
}

// ================================ DECODE ================================
static inline void decodeMCP_KickerCharge(MCP_KickerCharge *mcpkc, MCP_KickerChargePayload *mcpkcp){
    mcpkc->voltage       = MCP_KickerCharge_get_voltage(mcpkcp);
}

#endif /*__MCP_KICKER_CHARGE_H*/
