// AUTOGENERATED. Run generator/main.py to regenerate
/*
[  0   ] [  1   ]
11111111 -------- ack_number
-------- 1------- kickerOn
-------- -1------ kickerFault
-------- --1----- kickerReady
*/

#ifndef __MCP_KICKER_STATUS_H
#define __MCP_KICKER_STATUS_H

#include <stdbool.h>
#include <stdint.h>
#include "MCP_BaseTypes.h"

typedef struct _MCP_KickerStatusPayload {
    uint8_t payload[MCP_PACKET_SIZE_MCP_KICKER_STATUS];
} MCP_KickerStatusPayload;

typedef struct _MCP_KickerStatus {
    uint32_t   ack_number          ; // integer [0, 255]             acknowledgements
    bool       kickerOn            ; // integer [0, 1]               If kicker is on & charging
    bool       kickerFault         ; // integer [0, 1]               If kicker return fault
    bool       kickerReady         ; // integer [0, 1]               Indicatei if kicker is ready to shoot
} MCP_KickerStatus;

// ================================ GETTERS ================================
static inline uint32_t MCP_KickerStatus_get_ack_number(MCP_KickerStatusPayload *mcpksp){
   return ((mcpksp->payload[0]));
}

static inline bool MCP_KickerStatus_get_kickerOn(MCP_KickerStatusPayload *mcpksp){
    return (mcpksp->payload[1] & 0b10000000) > 0;
}

static inline bool MCP_KickerStatus_get_kickerFault(MCP_KickerStatusPayload *mcpksp){
    return (mcpksp->payload[1] & 0b01000000) > 0;
}

static inline bool MCP_KickerStatus_get_kickerReady(MCP_KickerStatusPayload *mcpksp){
    return (mcpksp->payload[1] & 0b00100000) > 0;
}

// ================================ SETTERS ================================
static inline void MCP_KickerStatus_set_ack_number(MCP_KickerStatusPayload *mcpksp, uint32_t ack_number){
    mcpksp->payload[0] = ack_number;
}

static inline void MCP_KickerStatus_set_kickerOn(MCP_KickerStatusPayload *mcpksp, bool kickerOn){
    mcpksp->payload[1] = ((kickerOn << 7) & 0b10000000) | (mcpksp->payload[1] & 0b01111111);
}

static inline void MCP_KickerStatus_set_kickerFault(MCP_KickerStatusPayload *mcpksp, bool kickerFault){
    mcpksp->payload[1] = ((kickerFault << 6) & 0b01000000) | (mcpksp->payload[1] & 0b10111111);
}

static inline void MCP_KickerStatus_set_kickerReady(MCP_KickerStatusPayload *mcpksp, bool kickerReady){
    mcpksp->payload[1] = ((kickerReady << 5) & 0b00100000) | (mcpksp->payload[1] & 0b11011111);
}

// ================================ ENCODE ================================
static inline void encodeMCP_KickerStatus(MCP_KickerStatusPayload *mcpksp, MCP_KickerStatus *mcpks){
    MCP_KickerStatus_set_ack_number          (mcpksp, mcpks->ack_number);
    MCP_KickerStatus_set_kickerOn            (mcpksp, mcpks->kickerOn);
    MCP_KickerStatus_set_kickerFault         (mcpksp, mcpks->kickerFault);
    MCP_KickerStatus_set_kickerReady         (mcpksp, mcpks->kickerReady);
}

// ================================ DECODE ================================
static inline void decodeMCP_KickerStatus(MCP_KickerStatus *mcpks, MCP_KickerStatusPayload *mcpksp){
    mcpks->ack_number    = MCP_KickerStatus_get_ack_number(mcpksp);
    mcpks->kickerOn      = MCP_KickerStatus_get_kickerOn(mcpksp);
    mcpks->kickerFault   = MCP_KickerStatus_get_kickerFault(mcpksp);
    mcpks->kickerReady   = MCP_KickerStatus_get_kickerReady(mcpksp);
}

#endif /*__MCP_KICKER_STATUS_H*/
