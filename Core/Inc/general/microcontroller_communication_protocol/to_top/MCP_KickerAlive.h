// AUTOGENERATED. Run generator/main.py to regenerate
/*
[  0   ]
1111---- mcpVersion
----1--- sensorWorking
*/

#ifndef __MCP_KICKER_ALIVE_H
#define __MCP_KICKER_ALIVE_H

#include <stdbool.h>
#include <stdint.h>
#include "MCP_BaseTypes.h"

typedef struct _MCP_KickerAlivePayload {
    uint8_t payload[MCP_PACKET_SIZE_MCP_KICKER_ALIVE];
} MCP_KickerAlivePayload;

typedef struct _MCP_KickerAlive {
    uint32_t   mcpVersion          ; // integer [0, 15]              version of mcp
    bool       sensorWorking       ; // integer [0, 1]               capacitor voltage sensor working
} MCP_KickerAlive;

// ================================ GETTERS ================================
static inline uint32_t MCP_KickerAlive_get_mcpVersion(MCP_KickerAlivePayload *mcpkap){
   return ((mcpkap->payload[0] & 0b11110000) >> 4);
}

static inline bool MCP_KickerAlive_get_sensorWorking(MCP_KickerAlivePayload *mcpkap){
    return (mcpkap->payload[0] & 0b00001000) > 0;
}

// ================================ SETTERS ================================
static inline void MCP_KickerAlive_set_mcpVersion(MCP_KickerAlivePayload *mcpkap, uint32_t mcpVersion){
    mcpkap->payload[0] = ((mcpVersion << 4) & 0b11110000) | (mcpkap->payload[0] & 0b00001111);
}

static inline void MCP_KickerAlive_set_sensorWorking(MCP_KickerAlivePayload *mcpkap, bool sensorWorking){
    mcpkap->payload[0] = ((sensorWorking << 3) & 0b00001000) | (mcpkap->payload[0] & 0b11110111);
}

// ================================ ENCODE ================================
static inline void encodeMCP_KickerAlive(MCP_KickerAlivePayload *mcpkap, MCP_KickerAlive *mcpka){
    MCP_KickerAlive_set_mcpVersion          (mcpkap, mcpka->mcpVersion);
    MCP_KickerAlive_set_sensorWorking       (mcpkap, mcpka->sensorWorking);
}

// ================================ DECODE ================================
static inline void decodeMCP_KickerAlive(MCP_KickerAlive *mcpka, MCP_KickerAlivePayload *mcpkap){
    mcpka->mcpVersion    = MCP_KickerAlive_get_mcpVersion(mcpkap);
    mcpka->sensorWorking = MCP_KickerAlive_get_sensorWorking(mcpkap);
}

#endif /*__MCP_KICKER_ALIVE_H*/
