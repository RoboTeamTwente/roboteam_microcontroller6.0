// AUTOGENERATED. Run generator/main.py to regenerate
/*
[  0   ] [  1   ]
11111111 -------- ack_number
-------- 1------- sensorWorking
*/

#ifndef __MCP_KICKER_ALIVE_H
#define __MCP_KICKER_ALIVE_H

#include <stdbool.h>
#include <stdint.h>
#include "MCP_BaseTypes.h"

typedef struct _MCP_KickerAlivePayload {
    uint8_t payload[MCP_PACKET_SIZE_MCP_KICKER_ALIVE];
} MCP_KickerAlivePayload;

typedef struct _MCP_KickerAlive {
    uint32_t   ack_number          ; // integer [0, 255]             acknowledgements
    bool       sensorWorking       ; // integer [0, 1]               capacitor voltage sensor working
} MCP_KickerAlive;

// ================================ GETTERS ================================
static inline uint32_t MCP_KickerAlive_get_ack_number(MCP_KickerAlivePayload *mcpkap){
   return ((mcpkap->payload[0]));
}

static inline bool MCP_KickerAlive_get_sensorWorking(MCP_KickerAlivePayload *mcpkap){
    return (mcpkap->payload[1] & 0b10000000) > 0;
}

// ================================ SETTERS ================================
static inline void MCP_KickerAlive_set_ack_number(MCP_KickerAlivePayload *mcpkap, uint32_t ack_number){
    mcpkap->payload[0] = ack_number;
}

static inline void MCP_KickerAlive_set_sensorWorking(MCP_KickerAlivePayload *mcpkap, bool sensorWorking){
    mcpkap->payload[1] = ((sensorWorking << 7) & 0b10000000) | (mcpkap->payload[1] & 0b01111111);
}

// ================================ ENCODE ================================
static inline void encodeMCP_KickerAlive(MCP_KickerAlivePayload *mcpkap, MCP_KickerAlive *mcpka){
    MCP_KickerAlive_set_ack_number          (mcpkap, mcpka->ack_number);
    MCP_KickerAlive_set_sensorWorking       (mcpkap, mcpka->sensorWorking);
}

// ================================ DECODE ================================
static inline void decodeMCP_KickerAlive(MCP_KickerAlive *mcpka, MCP_KickerAlivePayload *mcpkap){
    mcpka->ack_number    = MCP_KickerAlive_get_ack_number(mcpkap);
    mcpka->sensorWorking = MCP_KickerAlive_get_sensorWorking(mcpkap);
}

#endif /*__MCP_KICKER_ALIVE_H*/
