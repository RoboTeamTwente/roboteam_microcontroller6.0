// AUTOGENERATED. Run generator/main.py to regenerate
/*
[  0   ] [  1   ]
11111111 -------- ack_number
-------- 1------- sensorWorking
*/

#ifndef __MCP_POWER_ALIVE_H
#define __MCP_POWER_ALIVE_H

#include <stdbool.h>
#include <stdint.h>
#include "MCP_BaseTypes.h"

typedef struct _MCP_PowerAlivePayload {
    uint8_t payload[MCP_PACKET_SIZE_MCP_POWER_ALIVE];
} MCP_PowerAlivePayload;

typedef struct _MCP_PowerAlive {
    uint32_t   ack_number          ; // integer [0, 255]             acknowledgements
    bool       sensorWorking       ; // integer [0, 1]               voltage sensor working
} MCP_PowerAlive;

// ================================ GETTERS ================================
static inline uint32_t MCP_PowerAlive_get_ack_number(MCP_PowerAlivePayload *mcppap){
   return ((mcppap->payload[0]));
}

static inline bool MCP_PowerAlive_get_sensorWorking(MCP_PowerAlivePayload *mcppap){
    return (mcppap->payload[1] & 0b10000000) > 0;
}

// ================================ SETTERS ================================
static inline void MCP_PowerAlive_set_ack_number(MCP_PowerAlivePayload *mcppap, uint32_t ack_number){
    mcppap->payload[0] = ack_number;
}

static inline void MCP_PowerAlive_set_sensorWorking(MCP_PowerAlivePayload *mcppap, bool sensorWorking){
    mcppap->payload[1] = ((sensorWorking << 7) & 0b10000000) | (mcppap->payload[1] & 0b01111111);
}

// ================================ ENCODE ================================
static inline void encodeMCP_PowerAlive(MCP_PowerAlivePayload *mcppap, MCP_PowerAlive *mcppa){
    MCP_PowerAlive_set_ack_number          (mcppap, mcppa->ack_number);
    MCP_PowerAlive_set_sensorWorking       (mcppap, mcppa->sensorWorking);
}

// ================================ DECODE ================================
static inline void decodeMCP_PowerAlive(MCP_PowerAlive *mcppa, MCP_PowerAlivePayload *mcppap){
    mcppa->ack_number    = MCP_PowerAlive_get_ack_number(mcppap);
    mcppa->sensorWorking = MCP_PowerAlive_get_sensorWorking(mcppap);
}

#endif /*__MCP_POWER_ALIVE_H*/
