// AUTOGENERATED. Run generator/main.py to regenerate
/*
[  0   ]
11111111 ack_number
*/

#ifndef __MCP_ACK_H
#define __MCP_ACK_H

#include <stdbool.h>
#include <stdint.h>
#include "MCP_BaseTypes.h"

typedef struct _MCP_AckPayload {
    uint8_t payload[MCP_PACKET_SIZE_MCP_ACK];
} MCP_AckPayload;

typedef struct _MCP_Ack {
    uint32_t   ack_number          ; // integer [0, 255]             acknowledgements
} MCP_Ack;

// ================================ GETTERS ================================
static inline uint32_t MCP_Ack_get_ack_number(MCP_AckPayload *mcpap){
   return ((mcpap->payload[0]));
}

// ================================ SETTERS ================================
static inline void MCP_Ack_set_ack_number(MCP_AckPayload *mcpap, uint32_t ack_number){
    mcpap->payload[0] = ack_number;
}

// ================================ ENCODE ================================
static inline void encodeMCP_Ack(MCP_AckPayload *mcpap, MCP_Ack *mcpa){
    MCP_Ack_set_ack_number          (mcpap, mcpa->ack_number);
}

// ================================ DECODE ================================
static inline void decodeMCP_Ack(MCP_Ack *mcpa, MCP_AckPayload *mcpap){
    mcpa->ack_number     = MCP_Ack_get_ack_number(mcpap);
}

#endif /*__MCP_ACK_H*/
