// AUTOGENERATED. Run generator/main.py to regenerate
/*
[  0   ]
11111111 speed
*/

#ifndef __MCP_SET_DRIBBLER_SPEED_H
#define __MCP_SET_DRIBBLER_SPEED_H

#include <stdbool.h>
#include <stdint.h>
#include "MCP_BaseTypes.h"

typedef struct _MCP_SetDribblerSpeedPayload {
    uint8_t payload[MCP_PACKET_SIZE_MCP_SET_DRIBBLER_SPEED];
} MCP_SetDribblerSpeedPayload;

typedef struct _MCP_SetDribblerSpeed {
    float      speed               ; // float   [0.000, 1.000]       desired speed of the dribbler
} MCP_SetDribblerSpeed;

// ================================ GETTERS ================================
static inline float MCP_SetDribblerSpeed_get_speed(MCP_SetDribblerSpeedPayload *mcpsdsp){
    uint32_t _speed = ((mcpsdsp->payload[0]));
    return (_speed * 0.0039215686274510F);
}

// ================================ SETTERS ================================
static inline void MCP_SetDribblerSpeed_set_speed(MCP_SetDribblerSpeedPayload *mcpsdsp, float speed){
    uint32_t _speed = (uint32_t)(speed / 0.0039215686274510F);
    mcpsdsp->payload[0] = _speed;
}

// ================================ ENCODE ================================
static inline void encodeMCP_SetDribblerSpeed(MCP_SetDribblerSpeedPayload *mcpsdsp, MCP_SetDribblerSpeed *mcpsds){
    MCP_SetDribblerSpeed_set_speed               (mcpsdsp, mcpsds->speed);
}

// ================================ DECODE ================================
static inline void decodeMCP_SetDribblerSpeed(MCP_SetDribblerSpeed *mcpsds, MCP_SetDribblerSpeedPayload *mcpsdsp){
    mcpsds->speed        = MCP_SetDribblerSpeed_get_speed(mcpsdsp);
}

#endif /*__MCP_SET_DRIBBLER_SPEED_H*/
